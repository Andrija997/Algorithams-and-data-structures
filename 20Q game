#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 1000
typedef struct node
{
	char info[256];
	struct node *left;
	struct node *right;
} Node ;
void PUSH(struct node** pok,struct node **stek[], int *top) {
	if ( *top == MAX)
		printf("Error, overflow.");
	else stek[++*top] = *pok;
	return;
}
struct node * POP( struct node **stek[], int* top) {
	if (*top < 0)
		printf("Underflow.");
	else return stek[(*top)--];
}
struct node * TOP( struct node **stek[], int top) {
	if (top < 0)
		printf("Underflow.");
	else return stek[top];
}
void base_change(Node** ROOT){
	char input[255], c, a, k;
	int check1 = 0,check0=0;
	int top = -1,i;
	Node *stack[MAX + 1];
	Node *lp , *rp, *x;
		printf("Input for  a root question? \t");  //root input
		*ROOT = (struct node *)malloc(sizeof(struct node));
		 fgets((*ROOT)->info, 255, stdin);
	     //  ROOT = (struct node *)malloc(sizeof(struct node));
		// strcpy(*ROOT->info, input);
		PUSH(ROOT, &stack, &top);
		check1 = 1;
		check0 = 0;
		while ( top >= 0 ) {
			printf("Q/A?");
			c = getchar();
			switch (c) {
			case 'q': case 'Q':  
				if (check1==1 && check0==0) {	 
					lp = (struct node *)malloc(sizeof(struct node));//doslo je pitanje, predhodno nije bio odgovor
					printf("Unesite pitanje: \n");
					while((a = getchar()) =='\n');
					if (a != '\n') { lp->info[0] = a; i = 1; }
					else i = 0;
					while ((a = getchar()) != '\n')
						lp->info[i++] = a;
					lp->info[i] = '\0';
					//fgets(lp->info, 255, stdin);
					//lp = (struct node *)malloc(sizeof(struct node));
					x = TOP(&stack, top);
					x->left = lp;
					//strcpy(*lp->info, input);
					PUSH(&lp, &stack, &top);
					check1 = 1; 
					check0 = 0;
				}
				else  {
					rp = (struct node *)malloc(sizeof(struct node));
					printf("Unesite pitanje: ");
					while ((a = getchar()) == '\n');
					if (a != '\n') { rp->info[0] = a; i = 1; }
					else i = 0;
					while ((a = getchar()) != '\n')
						rp->info[i++] = a;
					rp->info[i] = '\0';
					x = POP(&stack, &top);
					x->right = rp;
					PUSH(&rp, &stack, &top);
					check1 = 1;
					check0 = 0;
				}
				break;
			case 'a': case 'A':
				if (check1==1 && check0==0 ) {
					lp = (struct node *)malloc(sizeof(struct node)); 
					printf("Unesite odgovor: ");
					while ((a = getchar()) == '\n');
					if (a != '\n') { lp->info[0] = a; i = 1; }
					else i = 0;
					while ((a = getchar()) != '\n')
						lp->info[i++] = a;
					lp->info[i] = '\0';
					x = TOP(&stack, top);
					x->left = lp;
					lp->left = lp->right = NULL;
					check1 = 0;
					check0 = 1; // prilikom unosa sledeceg pitanja, da zna da unosi u desno podstablo predhodnog na steku
				}
				else if( check1==0 && check0==1) {
					check1 = 0;
					check0 = 1;
					rp = (struct node *)malloc(sizeof(struct node)); 
					printf("Unesite odgovor: ");
					while ((a = getchar()) == '\n');
					if (a != '\n') { rp->info[0] = a; i = 1; }
					else i = 0;
					while ((a = getchar()) != '\n')
						rp->info[i++] = a;
					rp->info[i] = '\0';
					x = POP(&stack, &top);
					x->right = rp;
					 rp->right = NULL;
					 rp->left = NULL;
				} break;
		} 
	}
}
void play_the_game(Node** ROOT) {
	Node *p,*q,*tmp, *new_answer;
	char check[3]="",a,c;
	int forward,i;
	p = *ROOT;
	q = NULL;
	printf("%s\n", p->info);
	while ((a = getchar()) == '\n');
	if (a != '\n') { check[0] = a; i = 1; }
	else i = 0;
	while ((a = getchar()) != '\n')
		check[i++] = a;
	    check[i] = '\0';
		if (check[0] == 'd') forward = 1;
		else forward = 0;
	while (p->left != NULL) {
		q = p;
		if (forward) p = p->left;
		else p = p->right;
		printf("%s\n", p->info);
		while ((a = getchar()) == '\n');
		if (a != '\n') { check[0] = a; i = 1; }
		else i = 0;
		while ((a = getchar()) != '\n')
			check[i++] = a;
		check[i] = '\0';
		if (check[0] == 'd') forward = 1;
		else forward = 0;
	}
	if (check[0] == 'd') 
		printf("\n Kompjuter je pobedio...");
	else {
		printf("To imam u bazi podataka...\n");
		printf("Unesite pitanje po kome cu razlikovati pojam od predjasnje ponudjenog:\n ");
		tmp = (struct node *)malloc(sizeof(struct node));
		if (p == q->left) q->left = tmp;
		else q->right = tmp;
		while ((a = getchar()) == '\n');
		if (a != '\n') { tmp->info[0] = a; i = 1; }
		else i = 0;
		while ((a = getchar()) != '\n')
		     tmp->info[i++] = a;
		tmp->info[i] = '\0';
		   printf("Unesite pojam na koji ste mislili: \n");
		   new_answer = (struct node *)malloc(sizeof(struct node));
		    while ((a = getchar()) == '\n');
		if (a != '\n') { new_answer->info[0] = a; i = 1; }
		else i = 0;
		while ((a = getchar()) != '\n')
			new_answer->info[i++] = a;
		new_answer->info[i] = '\0';
		new_answer->right = NULL;
		new_answer->left = NULL;
		tmp->left = new_answer;
		tmp->right = p;
	}
}
void termination(Node** ROOT) {
	int top = -1, i;
	Node *stack[MAX + 1];
	Node *lp, *rp, *x;
	x = *ROOT;
	while (1) {
		if (x -> right != NULL)
		PUSH(x->right, &stack, &top); // guram desni na stek;
		lp = x;
		x = x->left;
		free(lp);
		if (x == NULL)
			x = POP(&stack, &top);
	}
}
main() {
	Node *root_1 = NULL, *root_2 = NULL, *root_3 = NULL;
	base_change(&root_1);
	printf("\nGotov unos.");
	printf("\nKrece igra...");
	while (1) {
		play_the_game(&root_1);
		printf("\nKrece igra...");

	}
	char c = getchar();
}
